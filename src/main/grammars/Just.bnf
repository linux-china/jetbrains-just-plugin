{
  parserClass="org.mvnsearch.plugins.just.lang.parser.JustParser"
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"
  
  psiClassPrefix="Just"
  psiImplClassSuffix="Impl"
  psiPackage="org.mvnsearch.plugins.just.lang.psi"
  psiImplPackage="org.mvnsearch.plugins.just.lang.psi.impl"

  elementTypeHolderClass="org.mvnsearch.plugins.just.lang.psi.JustTypes"
  elementTypeClass="org.mvnsearch.plugins.just.lang.psi.JustElementType"
  tokenTypeClass="org.mvnsearch.plugins.just.lang.psi.JustTokenType"

  psiImplUtilClass="org.mvnsearch.plugins.just.lang.psi.impl.JustPsiImplUtil"

  tokens=[
      NEW_LINE='regexp:\n'
      WHITE_SPACE='regexp:\s+'
      OPEN_PAREN='regexp:\('
      CLOSE_PAREN='regexp:\)'
      OPEN_BRACE='regexp:[{]'
      CLOSE_BRACE='regexp:[}]'
      OPEN_BRACKET='regexp:\['
      CLOSE_BRACKET='regexp:]'
      COMMA='regexp:,'
      EQUAL='regexp:='
      EQEQ='regexp:=='
      NOEQ='regexp:!='
      REEQ='regexp:=~'
      OR='regexp:=\|\|'
      AND='regexp:=&&'
      DUOBLE_COLON='regexp:=(::)'
      PLUS='regexp:=+'
      SLASH='regexp:=/'
      X_INDICATOR='regexp:=x'
      BOOL_LITERAL='regexp:(true)|(false)'
      NUMBER_LITERAL='regexp:\d+'
      COMMA='regexp:,'
      COMMA='regexp:,'
      DOUBLE_AND='regexp:(&&)'
      ASSIGN='regexp:(:=)'
      SEPERATOR='regexp:(:)'
      QUESTION_MARK='regexp:(\?)'
      BACKTICK="regexp:`[^`]*`"
      INDENTED_BACKTICK="regexp:(```)[^`]*(```)"
      RAW_STRING="regexp:'[^']*'"
      INDENTED_RAW_STRING="regexp:(''')[^(')]*(''')"
      STRING='regexp:"[^"]*"'
      INDENTED_STRING='regexp:"(""")[^(")]*(""")'
      SETTING='regexp:[a-zA-Z_][a-zA-Z0-9_\-]*'
      EXPORT_NAME='regexp:[a-zA-Z_][a-zA-Z0-9_\-]*'
      ATTRIBUTE_NAME='regexp:[a-zA-Z0-9_\-]*'
      ID_LITERAL='regexp:[a-zA-Z_][a-zA-Z0-9_\-]*'
      VARIABLE='regexp:([a-zA-Z_][a-zA-Z0-9_-]*)'
      MOD_NAME='regexp:[a-zA-Z_][a-zA-Z0-9_\-]*'
      RECIPE_NAME='regexp:[a-zA-Z_][a-zA-Z0-9_\-]*'
      DEPENDENCY_NAME='regexp:[a-zA-Z_][a-zA-Z0-9_\-]*'
      RECIPE_PARAM_NAME='regexp:[$*+]?[a-zA-Z_][a-zA-Z0-9_\-]*'
      RECIPE_PARAMS='regexp:([^:\n]*)'
      SHEBANG='regexp:#!.*'
      COMMENT='regexp:#.*'
      CODE='regexp:(\n[ \t]+[^\n]*)*'

      KEYWORD_MOD='regexp:(mod)[?]?'
      KEYWORD_IMPORT='regexp:(import)[?]?'
      KEYWORD_ALIAS='regexp:(alias)'
      KEYWORD_EXPORT='regexp:(export)'
      KEYWORD_SET='regexp:(set)'
      KEYWORD_IF='regexp:(if)'
      KEYWORD_ELSE='regexp:(else)'
      KEYWORD_ELSE_IF='regexp:(else if)'
    ]
}


justfile ::= any*

private stmt ::= (SHEBANG_STATEMENT|COMMENT|MOD_STATEMENT|IMPORT_STATEMENT | ALIAS_STATEMENT|EXPORT_STATEMENT|SET_STATEMENT|ATTRIBUTE|VARIABLE_STATEMENT|RECIPE_STATEMENT|NEW_LINE)
private recover ::= !(any)
private any ::= !<<eof>> stmt {pin=1 recoverWhile=recover}

SHEBANG_STATEMENT ::= SHEBANG
X_STRING ::= X_INDICATOR STRING
X_INDENTED_STRING ::= X_INDICATOR INDENTED_STRING
X_RAW_STRING ::= X_INDICATOR RAW_STRING
X_INDENTED_RAW_STRING ::= X_INDICATOR INDENTED_RAW_STRING
TEXT_ITEM ::= (STRING|X_STRING|RAW_STRING|X_RAW_STRING|INDENTED_STRING|X_INDENTED_STRING|INDENTED_RAW_STRING|X_INDENTED_RAW_STRING)
STRING_LIST ::= OPEN_BRACKET (TEXT_ITEM (COMMA TEXT_ITEM)*)? COMMA? CLOSE_BRACKET
PAREN_PAIRS ::= OPEN_PAREN (EXPRESSION (COMMA EXPRESSION)*)? COMMA? CLOSE_PAREN
VALUE ::= (FUNCTION_CALL|PAREN_PAIRS|TEXT_ITEM|BACKTICK|INDENTED_BACKTICK|ID_LITERAL)
FUNCTION_CALL ::= FUNCTION_NAME PAREN_PAIRS
FUNCTION_NAME ::= ID_LITERAL
CONDITIONAL_CONTROL ::= KEYWORD_IF CONDITION NEW_LINE* CONDITIONAL_BLOCK NEW_LINE* (KEYWORD_ELSE_IF CONDITION NEW_LINE* CONDITIONAL_BLOCK NEW_LINE*)* KEYWORD_ELSE NEW_LINE* CONDITIONAL_BLOCK
CONDITIONAL_BLOCK ::= OPEN_BRACE  NEW_LINE* VALUE NEW_LINE* CLOSE_BRACE
CONDITION ::= CONDITION_PAIR
CONDITION_PAIR ::= EXPRESSION (EQEQ | NOEQ | REEQ) EXPRESSION
EXPRESSION ::= CONDITIONAL_CONTROL | ( SLASH EXPRESSION) | (VALUE (SLASH|PLUS|OR|AND) EXPRESSION) | VALUE
// mod statement
MOD_STATEMENT ::= KEYWORD_MOD QUESTION_MARK? MOD_NAME MOD_PATH?
MOD_PATH ::= TEXT_ITEM
// import statement
IMPORT_STATEMENT ::= KEYWORD_IMPORT QUESTION_MARK? JUSTFILE_PATH
JUSTFILE_PATH ::= IMPORT_PATH { mixin="org.mvnsearch.plugins.just.lang.psi.impl.JustfileFilenameMixin" }
IMPORT_PATH ::=  TEXT_ITEM
// export statement
EXPORT_STATEMENT ::= KEYWORD_EXPORT EXPORT_NAME ASSIGN (EXPRESSION | ID_LITERAL)+
// alias statement
ALIAS_STATEMENT ::= KEYWORD_ALIAS RECIPE_NAME ASSIGN RECIPE_NAME (DUOBLE_COLON RECIPE_NAME)*
// set statement
SET_STATEMENT ::= KEYWORD_SET SETTING ASSIGN? (BOOL_LITERAL | STRING_LIST | TEXT_ITEM)?
// variable statement
VARIABLE_STATEMENT ::= VARIABLE ASSIGN VARIABLE_VALUE
VARIABLE_VALUE ::= EXPRESSION+
// attribute declare for recipe
ATTRIBUTE ::=  OPEN_BRACKET ATTRIBUTE_ITEM (COMMA ATTRIBUTE_ITEM)*  CLOSE_BRACKET
ATTRIBUTE_ITEM ::=  ATTRIBUTE_NAME (ATTRIBUTE_KV | ATTRIBUTE_FUNCTION)?
ATTRIBUTE_KV ::=  SEPERATOR (STRING|RAW_STRING|X_STRING|X_RAW_STRING)
ATTRIBUTE_FUNCTION ::=  OPEN_PAREN (STRING|RAW_STRING|X_STRING|X_RAW_STRING) CLOSE_PAREN
// recipe statement
RECIPE_STATEMENT ::= RECIPE_NAME PARAMS? SEPERATOR DEPENDENCIES_WITH_CODE? { mixin="org.mvnsearch.plugins.just.lang.psi.JustRecipeElementImpl" implements="org.mvnsearch.plugins.just.lang.psi.JustNamedElement" methods=[getKey getValue getName setName getNameIdentifier getPresentation] }
PARAMS ::= RECIPE_PARAM*
RECIPE_PARAM ::= RECIPE_PARAM_NAME EQUAL? RECIPE_PARAM_VALUE?
RECIPE_PARAM_VALUE ::= EXPRESSION+
DEPENDENCIES_WITH_CODE ::= DEPENDENCY* (DOUBLE_AND DEPENDENCY+)? CODE_BLOCK?
DEPENDENCY ::= DEPENDENCY_WITH_PARAMS | DEPENDENCY_NAME
DEPENDENCY_WITH_PARAMS ::= OPEN_PAREN DEPENDENCY_NAME DEPENDENCY_PARAMS* CLOSE_PAREN
DEPENDENCY_PARAMS ::= DEPENDENCY_PARAM+
DEPENDENCY_PARAM ::= EXPRESSION
CODE_BLOCK ::= CODE {pin=1 implements=["com.intellij.psi.PsiLanguageInjectionHost"] mixin="org.mvnsearch.plugins.just.lang.psi.impl.JustfileCodeBlockInjectionHost"}
